[{"name": "app.py", "content": "# --------------------------------------------\n# Elias Analytics- Real-Time Data Visualization App\n# --------------------------------------------\n#\n# This PyShiny app demonstrates live temperature and barometric pressure readings\n# from Antarctica. The app generates randomized data every 10 seconds, including:\n# - Temperature in Celsius, Fahrenheit, and Kelvin\n# - Barometric pressure in hPa\n# \n# The app displays:\n# 1. The current date and time of the most recent reading\n# 2. The current temperature with a description based on value ranges\n# 3. The barometric pressure in hPa\n# 4. A table showing the most recent readings\n# 5. A plot of the latest temperature readings with a regression line\n#\n# The UI is designed using Shiny Express, and the app updates automatically\n# to reflect the latest data, providing a real-time data visualization experience.\n# --------------------------------------------\n\n\n# --------------------------------------------\n# Imports at the top - PyShiny EXPRESS VERSION\n# --------------------------------------------\n\n# From shiny, import just reactive and render\nfrom shiny import reactive, render\n\n# From shiny.express, import just ui and inputs if needed\nfrom shiny.express import ui\n\n# Standard Python libraries\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\n\n# Plotly for data visualization\nimport plotly.express as px\nfrom shinywidgets import render_plotly\n\n# SciPy for statistical regression\nfrom scipy import stats\n\n# Custom theme for UI\nfrom shinyswatch import theme\n\n# --------------------------------------------\n# Import icons as needed\n# --------------------------------------------\nfrom faicons import icon_svg\n\n# --------------------------------------------\n# Initialization\n# --------------------------------------------\n\n# Time interval for live data updates (in seconds)\nUPDATE_INTERVAL_SECS: int = 10\n\n# Initialize a REACTIVE VALUE using a deque (a queue with a fixed length)\nDEQUE_SIZE: int = 5\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# --------------------------------------------\n# Reactive Calculation for Live Data\n# --------------------------------------------\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate the calculation every UPDATE_INTERVAL_SECS to refresh data\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logic for temperature and barometric pressure\n    temp = round(random.uniform(-18, -16), 1)  # Random temperature in Celsius\n    timestamp = datetime.now().strftime(\"%m-%d-%Y %H:%M:%S\")  # Current timestamp\n    barometric_pressure = round(random.uniform(990, 1020), 1)  # Random barometric pressure in hPa\n\n    # New data entry\n    new_entry = {\n        \"temp\": temp,\n        \"temp_fahrenheit\": round(temp * 9 / 5 + 32, 1),  # Temperature in Fahrenheit\n        \"temp_kelvin\": round(temp + 273.15, 1),  # Temperature in Kelvin\n        \"barometric_pressure_hpa\": barometric_pressure,  # Barometric pressure in hPa\n        \"timestamp\": timestamp,\n    }\n\n    # Append new entry to the reactive deque\n    reactive_value_wrapper.get().append(new_entry)\n\n    # Return the full deque, a DataFrame for display, and the latest entry\n    deque_snapshot = reactive_value_wrapper.get()\n    df = pd.DataFrame(deque_snapshot)\n    latest_dictionary_entry = new_entry\n\n    return deque_snapshot, df, latest_dictionary_entry\n\n# --------------------------------------------\n# UI Page Layout Configuration\n# --------------------------------------------\nui.page_opts(\n    title=\"Elias Analytics: PyShiny Live Data\", \n    fillable=True,\n    style=\"max-height: 90vh; overflow-y: scroll; padding: 10px;\",\n    fullwidth=True,\n    theme=theme.lux  # Set theme for the app\n)\n\n# Sidebar for additional information and links\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Temp Readings in Antarctica\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time temperature readings in Antarctica.\",\n        class_=\"text-center\",\n    )\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\"GitHub\", href=\"https://github.com/NickElias01/cintel-05-cintel\", target=\"_blank\")\n    ui.a(\"GitHub App\", href=\"https://nickelias01.github.io/cintel-05-cintel/\", target=\"_blank\")\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\"PyShiny Express\", href=\"https://shiny.posit.co/blog/posts/shiny-express/\", target=\"_blank\")\n\n# --------------------------------------------\n# Main Content: Cards with Data Display\n# --------------------------------------------\n\n# Card displaying the current timestamp\nwith ui.card(full_screen=False):\n    ui.card_header(\"Current Date and Time\")\n\n    @render.text\n    def display_time():\n        \"\"\"Fetch and display the latest timestamp\"\"\"\n        deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n        return f\"{latest_dictionary_entry['timestamp']}\"\n\n# Card displaying the current temperature with description\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"snowflake\"),\n        theme=\"bg-gradient-blue-green\",\n    ):\n        \"Current Temperature\"\n        \n        @render.text\n        def display_temp():\n            \"\"\"Fetch and display the latest temperature with description based on Celsius\"\"\"\n            deque_snapshot, df, latest_entry = reactive_calc_combined()\n            temp = latest_entry[\"temp\"]\n\n            # Temperature description logic\n            if temp < -17.5:\n                description = \"Much Colder than Usual\"\n            elif -17.5 <= temp < -17.0:\n                description = \"Colder than Usual\"\n            elif -17.0 <= temp < -16.5:\n                description = \"Warmer than Usual\"\n            else:\n                description = \"Much Hotter than Usual\"\n\n            return f\"{temp} \u00b0C - {description}\"\n\n# Card displaying the current barometric pressure\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"flask\"),\n        theme=\"bg-gradient-green-blue\",\n    ):\n        \"Barometric Pressure\"\n\n        @render.text\n        def display_pressure():\n            \"\"\"Display the latest barometric pressure reading in hPa\"\"\"\n            _, _, latest_entry = reactive_calc_combined()\n            pressure = latest_entry[\"barometric_pressure_hpa\"]\n            return f\"{pressure} hPa\"\n\n# Card displaying the most recent readings in a table\nwith ui.card(full_screen=True):\n    ui.card_header(\"Most Recent Readings\")\n\n    @render.data_frame\n    def display_df():\n        \"\"\"Display the latest readings in a table\"\"\"\n        _, df, _ = reactive_calc_combined()\n        return df[[\"timestamp\", \"temp\", \"temp_fahrenheit\", \"temp_kelvin\", \"barometric_pressure_hpa\"]]\n\n\n# Card displaying the latest temperature readings with a regression line\nwith ui.card():\n    ui.card_header(\"Latest Temperature Readings w/ Regression Line\")\n\n    @render_plotly\n    def display_plot():\n        # Fetch from the reactive calc function\n        deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n        # Ensure the DataFrame is not empty before plotting\n        if not df.empty:\n            # Convert the 'timestamp' column to datetime for better plotting\n            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n            # Create scatter plot for readings\n            # pass in the df, the name of the x column, the name of the y column,\n            # and more\n        \n            fig = px.scatter(\n            df,\n            x=\"timestamp\",\n            y=\"temp\",\n            title=\"Temperature Readings with Regression Line\",\n            labels={\"temp\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"},\n            color_discrete_sequence=[\"blue\"] )\n            \n            # Linear regression - we need to get a list of the\n            # Independent variable x values (time) and the\n            # Dependent variable y values (temp)\n            # then, it's pretty easy using scipy.stats.linregress()\n\n            # For x let's generate a sequence of integers from 0 to len(df)\n            sequence = range(len(df))\n            x_vals = list(sequence)\n            y_vals = df[\"temp\"]\n\n            slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, y_vals)\n            df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n\n            # Add the regression line to the figure\n            fig.add_scatter(x=df[\"timestamp\"], y=df['best_fit_line'], mode='lines', name='Regression Line')\n\n            # Update layout as needed to customize further\n            fig.update_layout(xaxis_title=\"Time\",yaxis_title=\"Temperature (\u00b0C)\")\n\n        return fig", "type": "text"}]